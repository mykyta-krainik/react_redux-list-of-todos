{"version":3,"sources":["features/currentTodo/types.ts","features/currentTodo/currentTodoReducer.ts","enums/StatusFilter.ts","features/filter/types.ts","features/filter/filterReducer.ts","features/todos/types.ts","features/todos/todosReducer.ts","app/store.ts","app/hooks.ts","features/currentTodo/actions.ts","features/currentTodo/selectors.ts","features/filter/selectors.ts","components/TodoList/TodoList.tsx","helpers/filterTodosByStatus.ts","helpers/filterTodosByQuery.ts","features/filter/actions.ts","components/TodoFilter/TodoFilter.tsx","helpers/capitalizeFirstLetter.ts","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","features/todos/actions.ts","features/todos/selectors.ts","App.tsx","index.tsx"],"names":["TodoActions","StatusFilter","FilterActions","TodosActions","initialState","query","status","ALL","rootReducer","combineReducers","currentTodo","state","action","type","SET_ITEM","payload","REMOVE_ITEM","filter","SET_QUERY","CLEAR_QUERY","SET_FILTER","todos","SET_TODOS","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","actions","todo","getCurrentTodo","getCurrentTodoId","id","getFilter","TodoList","dispatch","selectedTodoId","filteredTodosByStatus","useMemo","filterStatus","completed","ACTIVE","COMPLETED","filterTodosByStatus","visibleTodos","queryLowerCase","trim","toLowerCase","title","includes","filterTodosByQuery","isMatching","length","className","map","classNames","onClick","currentTodoActions","newQuery","statusFilters","Object","values","TodoFilter","onSubmit","event","preventDefault","value","onChange","filterActions","target","statusFilter","word","toUpperCase","slice","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","useEffect","userId","u","href","email","name","getTodosFromStore","App","selectedTodo","isLoading","setIsLoading","todosFromServer","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3381cf35.chunk.js","sourcesContent":["import { Todo } from '../../types/Todo';\n\nexport enum TodoActions {\n  SET_ITEM = 'currentTodo/SET',\n  REMOVE_ITEM = 'currentTodo/REMOVE',\n}\n\nexport type RemoveTodoAction = {\n  type: TodoActions.REMOVE_ITEM;\n};\n\nexport type SetTodoAction = {\n  type: TodoActions.SET_ITEM;\n  payload: Todo;\n};\n","import { Reducer } from 'redux';\n\nimport { Todo } from '../../types/Todo';\nimport { RemoveTodoAction, SetTodoAction, TodoActions } from './types';\n\ntype CurrentTodoState = Todo | null;\ntype CurrentTodoAction = SetTodoAction | RemoveTodoAction;\ntype CurrentTodoReducer = Reducer<CurrentTodoState, CurrentTodoAction>;\n\nexport const currentTodoReducer: CurrentTodoReducer = (\n  state = null,\n  action,\n) => {\n  switch (action.type) {\n    case TodoActions.SET_ITEM:\n      return action.payload;\n\n    case TodoActions.REMOVE_ITEM:\n      return null;\n\n    default:\n      return state;\n  }\n};\n","export enum StatusFilter {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { StatusFilter } from '../../enums/StatusFilter';\n\nexport enum FilterActions {\n  SET_QUERY = 'filter/SET_QUERY',\n  CLEAR_QUERY = 'filter/CLEAR_QUERY',\n  SET_FILTER = 'filter/SET_FILTER',\n}\n\nexport type SetQueryAction = {\n  type: FilterActions.SET_QUERY;\n  payload: string;\n};\n\nexport type ClearQueryAction = {\n  type: FilterActions.CLEAR_QUERY;\n};\n\nexport type SetFilterAction = {\n  type: FilterActions.SET_FILTER;\n  payload: StatusFilter;\n};\n","import { Reducer } from 'redux';\n\nimport { StatusFilter } from '../../enums/StatusFilter';\nimport {\n  ClearQueryAction,\n  FilterActions,\n  SetFilterAction,\n  SetQueryAction,\n} from './types';\n\ntype FilterState = {\n  query: string;\n  status: StatusFilter;\n};\n\ntype FilterAction = SetQueryAction | ClearQueryAction | SetFilterAction;\n\nconst initialState: FilterState = {\n  query: '',\n  status: StatusFilter.ALL,\n};\n\nexport const filterReducer: Reducer<FilterState, FilterAction> = (\n  state = initialState,\n  action,\n) => {\n  switch (action.type) {\n    case FilterActions.SET_QUERY:\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case FilterActions.CLEAR_QUERY:\n      return {\n        ...state,\n        query: '',\n      };\n\n    case FilterActions.SET_FILTER:\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { Todo } from '../../types/Todo';\n\nexport enum TodosActions {\n  SET_TODOS = 'todos/SET',\n}\n\nexport type SetTodosAction = {\n  type: TodosActions.SET_TODOS;\n  payload: Todo[];\n};\n","import { Reducer } from 'redux';\n\nimport { Todo } from '../../types/Todo';\nimport { SetTodosAction, TodosActions } from './types';\n\ntype TodosState = Todo[];\n\ntype TodosAction = SetTodosAction;\n\nconst initialState: Todo[] = [];\n\nexport const todosReducer: Reducer<TodosState, TodosAction> = (\n  state = initialState,\n  action,\n): Todo[] => {\n  switch (action.type) {\n    case TodosActions.SET_TODOS:\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport { currentTodoReducer } from '../features/currentTodo/currentTodoReducer';\nimport { filterReducer } from '../features/filter/filterReducer';\nimport { todosReducer } from '../features/todos/todosReducer';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\ntype DispatchFunc = () => AppDispatch;\n\nexport const useAppDispatch: DispatchFunc = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Todo } from '../../types/Todo';\nimport { RemoveTodoAction, SetTodoAction, TodoActions } from './types';\n\nconst removeTodo = (): RemoveTodoAction => ({\n  type: TodoActions.REMOVE_ITEM,\n});\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: TodoActions.SET_ITEM,\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n","import { RootState } from '../../app/store';\n\nexport const getCurrentTodo = (state: RootState) => {\n  return state.currentTodo;\n};\n\nexport const getCurrentTodoId = (state: RootState) => {\n  return state.currentTodo?.id || 0;\n};\n","import { RootState } from '../../app/store';\n\nexport const getFilter = (state: RootState) => {\n  return state.filter;\n};\n","import React, { useMemo } from 'react';\nimport classNames from 'classnames';\n\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\n\nimport {\n  actions as currentTodoActions,\n} from '../../features/currentTodo/actions';\nimport { getCurrentTodoId } from '../../features/currentTodo/selectors';\nimport { getFilter } from '../../features/filter/selectors';\n\nimport { filterTodosByQuery } from '../../helpers/filterTodosByQuery';\nimport { filterTodosByStatus } from '../../helpers/filterTodosByStatus';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const dispatch = useAppDispatch();\n  const { query, status } = useAppSelector(getFilter);\n  const selectedTodoId = useAppSelector(getCurrentTodoId);\n\n  const filteredTodosByStatus = useMemo(\n    () => filterTodosByStatus(todos, status),\n    [status, todos],\n  );\n\n  const visibleTodos = useMemo(\n    () => filterTodosByQuery(filteredTodosByStatus, query),\n    [query, filteredTodosByStatus],\n  );\n\n  const isMatching = visibleTodos.length && todos.length;\n\n  return (\n    <>\n      {isMatching ? (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleTodos.map((todo) => (\n              <tr\n                key={todo.id}\n                data-cy=\"todo\"\n              >\n                <td className=\"is-vcentered\">\n                  {todo.id}\n                </td>\n\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span\n                      className=\"icon\"\n                      data-cy=\"iconCompleted\"\n                    >\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={classNames({\n                      'has-text-success': todo.completed,\n                      'has-text-danger': !todo.completed,\n                    })}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => {\n                      dispatch(currentTodoActions.setTodo(todo));\n                    }}\n                  >\n                    <span className=\"icon\">\n                      <i\n                        className={classNames('far', {\n                          'fa-eye': todo.id !== selectedTodoId,\n                          'fa-eye-slash': todo.id === selectedTodoId,\n                        })}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n    </>\n  );\n};\n","import { StatusFilter } from '../enums/StatusFilter';\nimport { Todo } from '../types/Todo';\n\nexport const filterTodosByStatus = (\n  todos: Todo[],\n  filterStatus: StatusFilter,\n): Todo[] => {\n  if (filterStatus === StatusFilter.ALL) {\n    return todos;\n  }\n\n  return todos.filter(({ completed }) => {\n    switch (filterStatus) {\n      case StatusFilter.ACTIVE:\n        return !completed;\n\n      case StatusFilter.COMPLETED:\n        return completed;\n\n      default:\n        return true;\n    }\n  });\n};\n","import { Todo } from '../types/Todo';\n\nexport const filterTodosByQuery = (\n  todos: Todo[],\n  query: string,\n): Todo[] => {\n  if (!query) {\n    return todos;\n  }\n\n  const queryLowerCase = query.trim().toLowerCase();\n\n  return todos.filter(({ title }) => {\n    const titleLowerCase = title.toLowerCase();\n\n    return titleLowerCase.includes(queryLowerCase);\n  });\n};\n","import { StatusFilter } from '../../enums/StatusFilter';\nimport {\n  ClearQueryAction,\n  FilterActions,\n  SetFilterAction,\n  SetQueryAction,\n} from './types';\n\nconst setQuery = (newQuery: string): SetQueryAction => ({\n  type: FilterActions.SET_QUERY,\n  payload: newQuery,\n});\n\nconst clearQuery = (): ClearQueryAction => ({\n  type: FilterActions.CLEAR_QUERY,\n});\n\nconst setFilter = (filter: StatusFilter): SetFilterAction => ({\n  type: FilterActions.SET_FILTER,\n  payload: filter,\n});\n\nexport const actions = { setQuery, clearQuery, setFilter };\n","import React from 'react';\n\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\n\nimport { actions as filterActions } from '../../features/filter/actions';\nimport { capitalizeFirstLetter } from '../../helpers/capitalizeFirstLetter';\nimport { getFilter } from '../../features/filter/selectors';\n\nimport { StatusFilter } from '../../enums/StatusFilter';\n\nconst statusFilters = Object.values(StatusFilter);\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query, status } = useAppSelector(getFilter);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={(event) => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={(event) => {\n              return dispatch(\n                filterActions.setFilter(event.target.value as StatusFilter),\n              );\n            }}\n          >\n            {statusFilters.map((statusFilter) => (\n              <option\n                key={statusFilter}\n                value={statusFilter}\n              >\n                {capitalizeFirstLetter(statusFilter)}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => {\n            return dispatch(filterActions.setQuery(event.target.value));\n          }}\n        />\n\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span\n            className=\"icon is-right\"\n            style={{ pointerEvents: 'all' }}\n          >\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(filterActions.clearQuery())}\n              aria-label=\"Press Enter to clear the search field\"\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","export const capitalizeFirstLetter = (word: string): string => {\n  return word[0].toUpperCase() + word.slice(1);\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nconst BASE_URL = (\n  'https://mate-academy.github.io/react_dynamic-list-of-todos/api'\n);\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  const fullURL = `${BASE_URL}${url}.json`;\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodosFromServer = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\n\nimport { Loader } from '../Loader';\n\nimport { useAppDispatch } from '../../app/hooks';\n\nimport {\n  actions as currentTodoActions,\n} from '../../features/currentTodo/actions';\nimport { getUser } from '../../api';\n\nimport { Todo } from '../../types/Todo';\nimport { OptionalUser } from '../../types/OptionalUser';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo }) => {\n  const dispatch = useAppDispatch();\n\n  const [user, setUser] = useState<OptionalUser>(null);\n\n  useEffect(() => {\n    getUser(todo.userId).then((u) => {\n      setUser(u);\n    });\n  }, []);\n\n  const handleCloseModal = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  return (\n    <div\n      className=\"modal is-active\"\n      data-cy=\"modal\"\n    >\n      <div className=\"modal-background\" />\n\n      {user ? (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleCloseModal}\n              aria-label=\"Press Enter to close the modal window\"\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p\n              className=\"block\"\n              data-cy=\"modal-title\"\n            >\n              {todo.title}\n            </p>\n\n            <p\n              className=\"block\"\n              data-cy=\"modal-user\"\n            >\n              {todo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      ) : (\n        <Loader />\n      )}\n    </div>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { SetTodosAction, TodosActions } from './types';\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: TodosActions.SET_TODOS,\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n","import { RootState } from '../../app/store';\n\nexport const getTodosFromStore = (state: RootState) => {\n  return state.todos;\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { getTodosFromServer } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos/actions';\nimport { getTodosFromStore } from './features/todos/selectors';\nimport { getCurrentTodo } from './features/currentTodo/selectors';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(getTodosFromStore);\n  const selectedTodo = useAppSelector(getCurrentTodo);\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    getTodosFromServer().then((todosFromServer) => {\n      setIsLoading(false);\n\n      dispatch(todosActions.setTodos(todosFromServer));\n    });\n  }, [dispatch]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList todos={todos} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal todo={selectedTodo} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}